By: Eduardo Herreros
Date: 18/March/2022


Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = id: 10000
ii. Hours = business_id: 1562
iii. Category = business_id: 2643
iv. Attribute = business_id: 1115
v. Review = business_id: 8090, id: 10000, user_id: 9581 
vi. Checkin = business_id: 493
vii. Photo = business_id: 6493, id: 10000
viii. Tip = business_id: 3979
ix. User = id: 10000
x. Friend = user_id: 11
xi. Elite_years = user_id: 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
		
	SQL code used to arrive at answer:

SELECT COUNT(*)
FROM user
WHERE id IS NULL OR 
name IS NULL OR 
review_count IS NULL OR 
yelping_since IS NULL OR
useful IS NULL OR 
funny IS NULL OR 
cool IS NULL OR 
fans IS NULL OR 
average_stars IS NULL OR 
compliment_hot IS NULL OR 
compliment_more IS NULL OR 
compliment_profile IS NULL OR 
compliment_cute IS NULL OR 
compliment_list IS NULL OR 
compliment_note IS NULL OR 
compliment_plain IS NULL OR 
compliment_cool IS NULL OR 
compliment_funny IS NULL OR 
compliment_writer IS NULL OR 
compliment_photos IS NULL 
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

SELECT min(Column_name),
	 max(Column_name), 
	 avg(Column_name)
FROM table_name


	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1	max:	5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:


SELECT city, 
	 sum(review_count) as Reviews
FROM business
GROUP BY city
ORDER BY Reviews DESC


Copy and Paste the Result Below:
+-----------------+---------+
| city            | Reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)	
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
	
SELECT stars, 
	 sum(review_count) AS Count
FROM business
WHERE city IS 'Avon'
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------+
| stars | Count |
+-------+-------+
|   1.5 |    10 |
|   2.5 |     6 |
|   3.5 |    88 |
|   4.0 |    21 |
|   4.5 |    31 |
|   5.0 |     3 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, 
	 sum(review_count) AS Count
FROM business
WHERE city IS 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+-------+
| stars | Count |
+-------+-------+
|   2.0 |     8 |
|   2.5 |     3 |
|   3.0 |    11 |
|   3.5 |     6 |
|   4.0 |    69 |
|   4.5 |    17 |
|   5.0 |    23 |
+-------+-------+	


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT name, 
	 review_count 
FROM user
ORDER BY review_count desc
LIMIT 3


Copy and Paste the Result Below:
	
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+		


8. Does posing more reviews correlate with more fans?


Please explain your findings and interpretation of the results:

At simple view, we can not really determine if posing more reviews correlates with more fans, as there is not a function in 
SQLite that able us to do that matematically. However if we see the two tables below, the numbers do not present a clear correlation. 
For instance, Sara that is the second person with more reviews have only 50 fans, on the other side, Amy the person that have more fans have 
nearly the third part of reviews than Sara.

SELECT name, 
	 review_count, 
	 fans
FROM user
ORDER BY review_count DESC
+-----------+--------------+------+			
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

SELECT name, 
	 review_count, 
	 fans
FROM user
ORDER BY fans DESC
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+


9. Are there more reviews with the word "love" or with the word "hate" in them?

Answer: love

	
SQL code used to arrive at answer:

SELECT COUNT(*)				
FROM review
WHERE text LIKE "%love%"
Total: 1780


SELECT COUNT(*)
FROM review
WHERE text LIKE "%hate%"
Total: 232
	
	
10. Find the top 10 users with the most fans:

SQL code used to arrive at answer:

SELECT name, 
	 fans
FROM user
ORDER BY fans DESC
LIMIT 10
	
	
Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	

Part 2: Inferences and Analysis


1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

City: Toronto		Category: Restaurants

SELECT b.city, 
	 c.category
FROM business b inner join category c ON b.id = c.business_id
WHERE city IS 'Toronto'

# I picked Restaurants as my category.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Not really, they have slightly different distribution of hours. Some Restaurants open all day everyday, while other just a few hours per day.  

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes, they have different number of reviews, however the main differences are the one that have 3 or 4 stars. 
The restaurants with 4 starts have 89 reviews in contrast to only 5 reviews of the restaurans with 2 stars.    
      
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Using google street map I located the 4 restaurants. 99 Cent Sushi and Pizzaiolo are relatively close, but as well with Edulis restaurant. 
Sushi Osaka is located far away from the other three restaurants. We can not infer the quality of these 4 restaurants by the location, 
for this we will need more quantity of restaurants to do the comparison.

SQL code used for analysis:
SELECT b.name, 
	 b.City, 
	 b.stars, 
	 b.review_count, 
	 c.category, 
	 h.hours, 
	 b.address,
CASE 
    WHEN hours LIKE "%monday%" THEN 'Monday'
    WHEN hours LIKE "%tuesday%" THEN 'Tuesday'
    WHEN hours LIKE "%wednesday%" THEN 'Wednesday'
    WHEN hours LIKE "%thursday%" THEN 'Thursday'
    WHEN hours LIKE "%friday%" THEN 'Friday'
    WHEN hours LIKE "%saturday%" THEN 'Saturday'
    WHEN hours LIKE "%sunday%" THEN 'Sunday'
    END AS Week_day,
 CASE
    WHEN b.stars BETWEEN 2 AND 3 THEN '2-3 Stars'
    WHEN b.stars BETWEEN 4 AND 5 THEN '4-5 Stars'
    END AS star_rating
FROM business b inner join category c ON b.id = c.business_id inner join
hours h on b.id = h.business_id
WHERE city IS 'Toronto' and category IS 'Restaurants'
GROUP BY stars, Week_day

+---------------+---------+-------+--------------+-------------+-----------------------+-----------------------+-----------+-------------+
| name          | city    | stars | review_count | category    | hours                 | address               | Week_day  | star_rating |
+---------------+---------+-------+--------------+-------------+-----------------------+-----------------------+-----------+-------------+
| 99 Cent Sushi | Toronto |   2.0 |            5 | Restaurants | Friday|11:00-23:00    | 389 Church Street     | Friday    | 2-3 Stars   |
| 99 Cent Sushi | Toronto |   2.0 |            5 | Restaurants | Monday|11:00-23:00    | 389 Church Street     | Monday    | 2-3 Stars   |
| 99 Cent Sushi | Toronto |   2.0 |            5 | Restaurants | Saturday|11:00-23:00  | 389 Church Street     | Saturday  | 2-3 Stars   |
| 99 Cent Sushi | Toronto |   2.0 |            5 | Restaurants | Sunday|11:00-23:00    | 389 Church Street     | Sunday    | 2-3 Stars   |
| 99 Cent Sushi | Toronto |   2.0 |            5 | Restaurants | Thursday|11:00-23:00  | 389 Church Street     | Thursday  | 2-3 Stars   |
| 99 Cent Sushi | Toronto |   2.0 |            5 | Restaurants | Tuesday|11:00-23:00   | 389 Church Street     | Tuesday   | 2-3 Stars   |
| 99 Cent Sushi | Toronto |   2.0 |            5 | Restaurants | Wednesday|11:00-23:00 | 389 Church Street     | Wednesday | 2-3 Stars   |
| Pizzaiolo     | Toronto |   3.0 |           34 | Restaurants | Friday|9:00-4:00      | 270 Adelaide Street W | Friday    | 2-3 Stars   |
| Pizzaiolo     | Toronto |   3.0 |           34 | Restaurants | Monday|9:00-23:00     | 270 Adelaide Street W | Monday    | 2-3 Stars   |
| Pizzaiolo     | Toronto |   3.0 |           34 | Restaurants | Saturday|10:00-4:00   | 270 Adelaide Street W | Saturday  | 2-3 Stars   |
| Pizzaiolo     | Toronto |   3.0 |           34 | Restaurants | Sunday|10:00-23:00    | 270 Adelaide Street W | Sunday    | 2-3 Stars   |
| Pizzaiolo     | Toronto |   3.0 |           34 | Restaurants | Thursday|9:00-23:00   | 270 Adelaide Street W | Thursday  | 2-3 Stars   |
| Pizzaiolo     | Toronto |   3.0 |           34 | Restaurants | Tuesday|9:00-23:00    | 270 Adelaide Street W | Tuesday   | 2-3 Stars   |
| Pizzaiolo     | Toronto |   3.0 |           34 | Restaurants | Wednesday|9:00-23:00  | 270 Adelaide Street W | Wednesday | 2-3 Stars   |
| Edulis        | Toronto |   4.0 |           89 | Restaurants | Friday|18:00-23:00    | 169 Niagara Street    | Friday    | 4-5 Stars   |
| Edulis        | Toronto |   4.0 |           89 | Restaurants | Saturday|18:00-23:00  | 169 Niagara Street    | Saturday  | 4-5 Stars   |
| Edulis        | Toronto |   4.0 |           89 | Restaurants | Sunday|12:00-16:00    | 169 Niagara Street    | Sunday    | 4-5 Stars   |
| Edulis        | Toronto |   4.0 |           89 | Restaurants | Thursday|18:00-23:00  | 169 Niagara Street    | Thursday  | 4-5 Stars   |
| Edulis        | Toronto |   4.0 |           89 | Restaurants | Wednesday|18:00-23:00 | 169 Niagara Street    | Wednesday | 4-5 Stars   |
| Sushi Osaka   | Toronto |   4.5 |            8 | Restaurants | Friday|11:00-23:00    | 5084 Dundas Street W  | Friday    | 4-5 Stars   |
| Sushi Osaka   | Toronto |   4.5 |            8 | Restaurants | Monday|11:00-23:00    | 5084 Dundas Street W  | Monday    | 4-5 Stars   |
| Sushi Osaka   | Toronto |   4.5 |            8 | Restaurants | Saturday|11:00-23:00  | 5084 Dundas Street W  | Saturday  | 4-5 Stars   |
| Sushi Osaka   | Toronto |   4.5 |            8 | Restaurants | Sunday|14:00-23:00    | 5084 Dundas Street W  | Sunday    | 4-5 Stars   |
| Sushi Osaka   | Toronto |   4.5 |            8 | Restaurants | Thursday|11:00-23:00  | 5084 Dundas Street W  | Thursday  | 4-5 Stars   |
| Sushi Osaka   | Toronto |   4.5 |            8 | Restaurants | Tuesday|11:00-23:00   | 5084 Dundas Street W  | Tuesday   | 4-5 Stars   |
+---------------+---------+-------+--------------+-------------+-----------------------+-----------------------+-----------+-------------+
(Output limit exceeded, 25 of 26 total rows shown)


2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones 
that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

Open restaurants have slightly higher average stars than the closed restaurants.
         
ii. Difference 2:
         
Open restaurants have nine times more reviews than the ones that are closed.
         
SQL code used for analysis:

SELECT Count(DISTINCT(id)), 
	 avg(review_count) AS 'Avg_rev_counts', 
	 sum(review_count) AS 'Review_count', 	
	 avg(stars) 'Average_Stars', 	
	 is_open
FROM business
GROUP BY is_open

+---------------------+----------------+--------------+---------------+---------+
| Count(DISTINCT(id)) | Avg_rev_counts | Review_count | Average_Stars | is_open |
+---------------------+----------------+--------------+---------------+---------+
|                1520 |  23.1980263158 |        35261 | 3.52039473684 |       0 |
|                8480 |  31.7570754717 |       269300 | 3.67900943396 |       1 |
+---------------------+----------------+--------------+---------------+---------+
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, 
predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, 
so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:

	
i. Indicate the type of analysis you chose to do:

Where is the best location to open a new Restaurant or most likely to have a better rating.
           
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

For this porpuse, first I made comparisons of the Restaurants in the different cities with the neighboorhood locations. 
In the final table I added just the neighborhoods that the information is present in the table to take the decision. 
We can remark that in Cleveland, in Goodrich Kirtland neighborhood there are two restaurants with at least 3.5 stars out of 5..  	                          

iii. Output of your finished dataset:
         
+-------+------------------------+------------------------+-------------+-------------+---------+-------------+
| stars | name                   | neighborhood           | category    | city        | is_open | star_rating |
+-------+------------------------+------------------------+-------------+-------------+---------+-------------+
|   3.0 | Flaming Kitchen        | Brown's Corners        | Restaurants | Markham     |       1 | 2-3 stars   |
|   4.0 | Big Wong Restaurant    | Chinatown              | Restaurants | Las Vegas   |       1 | 3-4 stars   |
|   2.0 | 99 Cent Sushi          | Downtown Core          | Restaurants | Toronto     |       0 | 1-2 stars   |
|   3.0 | Big Smoke Burger       | Downtown Core          | Restaurants | Toronto     |       1 | 2-3 stars   |
|   4.5 | Hibachi-San            | Eastside               | Restaurants | Las Vegas   |       0 | 4-5 stars   |
|   3.0 | Pizzaiolo              | Entertainment District | Restaurants | Toronto     |       1 | 2-3 stars   |
|   4.5 | Sushi Osaka            | Etobicoke              | Restaurants | Toronto     |       1 | 4-5 stars   |
|   3.5 | Saigon Grille          | Goodrich Kirtland      | Restaurants | Cleveland   |       0 | 3-4 stars   |
|   4.5 | Slyman's Restaurant    | Goodrich Kirtland      | Restaurants | Cleveland   |       1 | 4-5 stars   |
|   4.5 | Cabin Fever            | High Park              | Restaurants | Toronto     |       1 | 4-5 stars   |
|   4.0 | Miros Cantina Mexicana | New Town               | Restaurants | Edinburgh   |       1 | 3-4 stars   |
|   4.0 | Edulis                 | Niagara                | Restaurants | Toronto     |       1 | 3-4 stars   |
|   2.5 | Papa Da Vinci          | Oakland                | Restaurants | Pittsburgh  |       1 | 2-3 stars   |
|   3.5 | Club India restaurant  | Old Town               | Restaurants | Edinburgh   |       0 | 3-4 stars   |
|   4.0 | Hermanos Mexican Grill | Port Credit            | Restaurants | Mississauga |       1 | 3-4 stars   |
|   4.0 | Jacques Cafe           | Summerlin              | Restaurants | Las Vegas   |       0 | 3-4 stars   |
|   3.5 | Poutine Lafleur        | Verdun                 | Restaurants | Verdun      |       1 | 3-4 stars   |
|   3.0 | Restaurant Rosalie     | Ville-Marie            | Restaurants | Montréal    |       0 | 2-3 stars   |
|   3.5 | Student Tasty Biryani  | Ville-Marie            | Restaurants | Montréal    |       1 | 3-4 stars   |
|   1.5 | Royal Dumpling         | Willowdale             | Restaurants | Toronto     |       1 | 1-2 stars   |
|   4.0 | Naniwa-Taro            | Willowdale             | Restaurants | Toronto     |       1 | 3-4 stars   |
+-------+------------------------+------------------------+-------------+-------------+---------+-------------+      

iv. Provide the SQL code you used to create your final dataset:

SELECT b.stars, 
	 b.name, 
	 b.neighborhood, 
	 c.category,
	 b.city,
     b.is_open,
CASE
WHEN B.stars BETWEEN 0 AND 1 THEN '0-1 stars'
WHEN B.stars BETWEEN 1 AND 2 THEN '1-2 stars'
WHEN B.stars BETWEEN 2 AND 3 THEN '2-3 stars'
WHEN B.stars BETWEEN 3 AND 4 THEN '3-4 stars'
WHEN B.stars BETWEEN 4 AND 5 THEN '4-5 stars'
END AS star_rating
FROM business b inner join category c on b.id = c.business_id
WHERE c.category is 'Restaurants' AND
b.neighborhood IS NOT NULL AND TRIM(b.neighborhood) <> ''
ORDER BY neighborhood, city, star_rating

